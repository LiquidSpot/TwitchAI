// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TwitchAI.Infrastructure.Persistence.Repositories;

#nullable disable

namespace TwitchAI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250511093949_Update_TextCompletion")]
    partial class Update_TextCompletion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("twitch-ai-client")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TwitchAI.Domain.Entites.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Bits")
                        .HasColumnType("integer");

                    b.Property<double>("BitsUsd")
                        .HasColumnType("double precision");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmoteReplacedText")
                        .HasColumnType("text");

                    b.Property<bool>("IsBroadcaster")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstMessage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMeAction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsModerator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkippingSubMode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubscriber")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTurbo")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RawTagsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TmiSentTs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TwitchUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TwitchUserId");

                    b.ToTable("ChatMessage", "twitch-ai-client");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FinishReason")
                        .HasColumnType("text");

                    b.Property<int?>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("TextCompletionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TextCompletionId");

                    b.ToTable("Choice", "twitch-ai-client");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.MessageGpt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RequestModelId")
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RequestModelId");

                    b.ToTable("MessageGpt", "twitch-ai-client");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.RequestModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("max_tokens")
                        .HasColumnType("integer");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("temperature")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("RequestModel", "twitch-ai-client");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.TextCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GptId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdUsage")
                        .HasColumnType("integer");

                    b.Property<Guid>("TwitchUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsageId")
                        .HasColumnType("uuid");

                    b.Property<int>("created")
                        .HasColumnType("integer");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("object")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TwitchUserId");

                    b.HasIndex("UsageId");

                    b.ToTable("TextCompletion", "twitch-ai-client");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.TwitchUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BadgesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CheerBits")
                        .HasColumnType("integer");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsBroadcaster")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPartner")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsStaff")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTurbo")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVip")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SubscribedMonthCount")
                        .HasColumnType("integer");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TwitchUser", "twitch-ai-client");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.Usage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("completion_tokens")
                        .HasColumnType("integer");

                    b.Property<int>("prompt_tokens")
                        .HasColumnType("integer");

                    b.Property<int>("total_tokens")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Usage", "twitch-ai-client");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.UserMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TwitchUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("maxToken")
                        .HasColumnType("integer");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<double?>("temp")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("TwitchUserId");

                    b.ToTable("UserMessage", "twitch-ai-client");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.ChatMessage", b =>
                {
                    b.HasOne("TwitchAI.Domain.Entites.TwitchUser", "TwitchUser")
                        .WithMany("ChatMessages")
                        .HasForeignKey("TwitchUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.Choice", b =>
                {
                    b.HasOne("TwitchAI.Domain.Entites.TextCompletion", "TextCompletion")
                        .WithMany("Choices")
                        .HasForeignKey("TextCompletionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextCompletion");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.MessageGpt", b =>
                {
                    b.HasOne("TwitchAI.Domain.Entites.RequestModel", null)
                        .WithMany("messages")
                        .HasForeignKey("RequestModelId");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.TextCompletion", b =>
                {
                    b.HasOne("TwitchAI.Domain.Entites.TwitchUser", "TwitchUser")
                        .WithMany()
                        .HasForeignKey("TwitchUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitchAI.Domain.Entites.Usage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId");

                    b.Navigation("TwitchUser");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.UserMessage", b =>
                {
                    b.HasOne("TwitchAI.Domain.Entites.TwitchUser", "TwitchUser")
                        .WithMany()
                        .HasForeignKey("TwitchUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.RequestModel", b =>
                {
                    b.Navigation("messages");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.TextCompletion", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("TwitchAI.Domain.Entites.TwitchUser", b =>
                {
                    b.Navigation("ChatMessages");
                });
#pragma warning restore 612, 618
        }
    }
}

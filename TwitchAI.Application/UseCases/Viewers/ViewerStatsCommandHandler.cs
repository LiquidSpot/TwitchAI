using Common.Packages.Logger.Services.Interfaces;
using Common.Packages.Response.Behaviors;
using Common.Packages.Response.Models;
using Microsoft.Extensions.Options;
using TwitchAI.Application.Interfaces;
using TwitchAI.Application.Models;
using TwitchAI.Domain.Enums.ErrorCodes;

namespace TwitchAI.Application.UseCases.Viewers
{
    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑—Ä–∏—Ç–µ–ª–µ–π
    /// </summary>
    internal class ViewerStatsCommandHandler : ICommandHandler<ViewerStatsCommand, LSResponse<string>>
    {
        private readonly IViewerMonitoringService _viewerMonitoringService;
        private readonly IExternalLogger<ViewerStatsCommandHandler> _logger;
        private readonly TwitchConfiguration _twitchConfig;

        public ViewerStatsCommandHandler(
            IViewerMonitoringService viewerMonitoringService,
            IExternalLogger<ViewerStatsCommandHandler> logger,
            IOptions<TwitchConfiguration> twitchConfig)
        {
            _viewerMonitoringService = viewerMonitoringService ?? throw new ArgumentNullException(nameof(viewerMonitoringService));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _twitchConfig = twitchConfig?.Value ?? throw new ArgumentNullException(nameof(twitchConfig));
        }

        public async Task<LSResponse<string>> Handle(ViewerStatsCommand request, CancellationToken cancellationToken)
        {
            _logger.LogInformation(new { 
                Method = nameof(Handle),
                UserId = request.UserId,
                CommandType = request.CommandType
            });

            var result = new LSResponse<string>();

            try
            {
                var channelName = _twitchConfig.ChannelName;

                switch (request.CommandType.ToLower())
                {
                    case "viewers":
                        var currentViewers = await _viewerMonitoringService.GetCurrentViewersAsync(channelName, cancellationToken);
                        var message = $"üéØ –í —á–∞—Ç–µ —Å–µ–π—á–∞—Å {currentViewers.Count} –∑—Ä–∏—Ç–µ–ª–µ–π";
                        
                        return result.Success(message);

                    case "silent":
                        var silentViewers = await _viewerMonitoringService.GetSilentViewersAsync(channelName, TimeSpan.FromHours(1), cancellationToken);
                        var silentMessage = $"ü§´ –ú–æ–ª—á–∞–ª–∏–≤—ã—Ö –∑—Ä–∏—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {silentViewers.Count}";
                        
                        return result.Success(silentMessage);

                    case "stats":
                        var viewers = await _viewerMonitoringService.GetCurrentViewersAsync(channelName, cancellationToken);
                        var silent = await _viewerMonitoringService.GetSilentViewersAsync(channelName, TimeSpan.FromHours(1), cancellationToken);
                        var active = viewers.Count - silent.Count;
                        
                        var statsMessage = $"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n" +
                                         $"üë• –í—Å–µ–≥–æ –∑—Ä–∏—Ç–µ–ª–µ–π: {viewers.Count}\n" +
                                         $"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–ø–∏—Å–∞–ª–∏): {active}\n" +
                                         $"ü§´ –ú–æ–ª—á–∞–ª–∏–≤—ã—Ö: {silent.Count}";
                        
                        return result.Success(statsMessage);

                    default:
                        return result.Success("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: !viewers, !silent, !stats");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError((int)BaseErrorCodes.OperationProcessError, new { 
                    Method = nameof(Handle),
                    Status = "Exception",
                    UserId = request.UserId,
                    CommandType = request.CommandType,
                    Error = ex.GetType().Name,
                    Message = ex.Message,
                    StackTrace = ex.StackTrace
                });

                return result.Error(BaseErrorCodes.OperationProcessError, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑—Ä–∏—Ç–µ–ª–µ–π.");
            }
        }
    }
} 
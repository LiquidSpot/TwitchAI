using Common.Packages.Logger.Services.Interfaces;
using Common.Packages.Response.Behaviors;
using Common.Packages.Response.Models;
using TwitchAI.Application.Interfaces;
using TwitchAI.Domain.Entites;
using TwitchAI.Domain.Enums.ErrorCodes;

namespace TwitchAI.Application.UseCases.Compliment
{
    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤
    /// </summary>
    internal class ComplimentCommandHandler : ICommandHandler<ComplimentCommand, LSResponse<string>>
    {
        private readonly IOpenAiService _openAiService;
        private readonly ITwitchUserService _twitchUserService;
        private readonly IExternalLogger<ComplimentCommandHandler> _logger;
        private static readonly Random _random = new();
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ—è OpenAI
        private static readonly string[] BackupCompliments = 
        {
            "–¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å! üöÄ‚ú®",
            "–£ —Ç–µ–±—è –∞—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è! üåü",
            "–¢—ã –∫–∞–∫ WiFi - –±–µ–∑ —Ç–µ–±—è –∂–∏–∑–Ω—å –Ω–µ —Ç–∞! üì∂üíï",
            "–¢—ã –∫—Ä—É—á–µ —á–µ–º –ø–∏—Ü—Ü–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É! üçïüòé",
            "–£ —Ç–µ–±—è —ç–Ω–µ—Ä–≥–∏—è –∫–∞–∫ —É —Å–æ–ª–Ω—Ü–∞! ‚òÄÔ∏èüî•"
        };

        public ComplimentCommandHandler(
            IOpenAiService openAiService,
            ITwitchUserService twitchUserService,
            IExternalLogger<ComplimentCommandHandler> logger)
        {
            _openAiService = openAiService ?? throw new ArgumentNullException(nameof(openAiService));
            _twitchUserService = twitchUserService ?? throw new ArgumentNullException(nameof(twitchUserService));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public async Task<LSResponse<string>> Handle(ComplimentCommand request, CancellationToken cancellationToken)
        {
            _logger.LogInformation(new { 
                Method = nameof(Handle),
                UserId = request.UserId,
                TargetUsername = request.TargetUsername
            });

            try
            {
                var result = new LSResponse<string>();
                string targetName;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞
                if (string.IsNullOrWhiteSpace(request.TargetUsername))
                {
                    // –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä—É –∫–æ–º–∞–Ω–¥—ã
                    var user = await _twitchUserService.GetUserByIdAsync(request.UserId, cancellationToken);
                    if (user == null)
                    {
                        return result.Success("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞.");
                    }
                    targetName = user.DisplayName;
                }
                else
                {
                    // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    targetName = request.TargetUsername.TrimStart('@');
                }

                // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ—Å–µ–ª—ã—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤
                var compliment = await GenerateAIComplimentAsync(targetName, cancellationToken);
                
                // –ï—Å–ª–∏ AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
                if (string.IsNullOrEmpty(compliment))
                {
                    compliment = GetRandomBackupCompliment();
                    
                    _logger.LogWarning(new { 
                        Method = nameof(Handle),
                        Status = "AI_Failed_Using_Backup",
                        UserId = request.UserId,
                        TargetName = targetName
                    });
                }

                var message = $"üíï {targetName}, {compliment}";

                _logger.LogInformation(new { 
                    Method = nameof(Handle),
                    Status = "Success",
                    UserId = request.UserId,
                    TargetUsername = targetName,
                    Compliment = compliment
                });

                return result.Success(message);
            }
            catch (Exception ex)
            {
                _logger.LogError((int)BaseErrorCodes.OperationProcessError, new { 
                    Method = nameof(Handle),
                    Status = "Exception",
                    UserId = request.UserId,
                    TargetUsername = request.TargetUsername,
                    Error = ex.GetType().Name,
                    Message = ex.Message,
                    StackTrace = ex.StackTrace
                });

                return new LSResponse<string>().Error(BaseErrorCodes.OperationProcessError, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞.");
            }
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é OpenAI
        /// </summary>
        private async Task<string?> GenerateAIComplimentAsync(string targetName, CancellationToken cancellationToken)
        {
            try
            {
                var prompt = $"–°–æ–∑–¥–∞–π –≤–µ—Å–µ–ª—ã–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ {targetName}. " +
                            "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–º–µ—à–Ω—ã–º, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–ª–µ–Ω–≥, –º–µ–º—ã, " +
                            "—Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –µ–¥–æ–π, –∏–≥—Ä–∞–º–∏, —Ñ–∏–ª—å–º–∞–º–∏ –∏–ª–∏ –∑–∞–±–∞–≤–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã. –ù–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤. " +
                            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –≤ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–µ, —Ç–æ–ª—å–∫–æ —Å–∞–º –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Å —è—Ä–∫–∏–º–∏ —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ! " +
                            "–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è: '–¢—ã –∫–∞–∫ —Ä–µ–¥–∫–∏–π –ª—É—Ç –≤ –∏–≥—Ä–µ - –≤—Å–µ —Ö–æ—Ç—è—Ç —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—å!', " +
                            "'–£ —Ç–µ–±—è –±–æ–ª—å—à–µ —Ö–∞—Ä–∏–∑–º—ã —á–µ–º —É –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∞–Ω–∏–º–µ!'";
                
                var userMessage = new UserMessage 
                { 
                    message = prompt,
                    role = Domain.Enums.Role.neko, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å neko –¥–ª—è –±–æ–ª–µ–µ –∏–≥—Ä–∏–≤—ã—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤
                    temp = 0.6, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                    maxToken = 150 // –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                };

                var response = await _openAiService.GenerateUniversalWithContextAsync(
                    userMessage, 
                    new List<ConversationMessage>(), 
                    ct: cancellationToken);

                if (response.Status == Common.Packages.Response.Enums.ResponseStatus.Success)
                {
                    return response.Result?.Trim();
                }

                _logger.LogWarning(new { 
                    Method = nameof(GenerateAIComplimentAsync),
                    Status = "AI_Generation_Failed",
                    TargetName = targetName,
                    ErrorCode = response.ErrorCode
                });

                return null;
            }
            catch (Exception ex)
            {
                _logger.LogError((int)BaseErrorCodes.OperationProcessError, new { 
                    Method = nameof(GenerateAIComplimentAsync),
                    Status = "Exception",
                    TargetName = targetName,
                    Error = ex.GetType().Name,
                    Message = ex.Message
                });

                return null;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
        /// </summary>
        private static string GetRandomBackupCompliment()
        {
            return BackupCompliments[_random.Next(BackupCompliments.Length)];
        }
    }
} 